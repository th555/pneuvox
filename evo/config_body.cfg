[NEAT]
fitness_criterion     = max
fitness_threshold     = 999999
pop_size              = 50
reset_on_extinction   = False


[VoxelbotGenome]
# Experiment type etc..
# possible options: flat (default), rows
terrain_type = flat
# Integer, -1 = random per evaluation
terrain_seed = 1

# Max size of robot body in voxels
bbox_x = 10
bbox_y = 10
bbox_z = 10

# evaluation time in simulated seconds
eval_seconds = 10

# Possible values: recurrent_closed, recurrent_open
# See comment in voxelbot.py for detailed explanation of these options
control_type          = recurrent_closed

# Perform the directed locomotion experiment, this means a specific fitness function is used
# and the controller gets a direction sensor input
directed_locomotion = False
# Train controllers on multiple directions in parallel, on different servers using MPI
multi_direction_mpi = False
# add the different parameters of the fitness (distance, penalty etc..) together over the
# different directions *before* computing the final fitness function. As opposed to computing
# the fitness function per direction and adding the results.
# (set it to false when multi_direction_mpi is also false)
fused_fitness = False

# sd with which the controller weights are initialized
weight_init_sd = 3.0
# starting value for the controller mutators
weight_mut_init = 3.0

# Disable the oscillator inputs of the controller (only works with closed loop and recurent)
disable_osc           = False
# How to initialize the weights for the recurrent nodes? ("random" or "zeroes" (default))
init_recurrent_weights = random
# Number of hidden nodes in the controller
ctrl_hidden_nodes = 4

# Controller weights crossover, possible values: random, 1point, 1pointpl (per layer), associative
crossover_method        = 1pointpl

# node activation options
activation_default      = random
activation_mutate_rate  = 0.01
# was 0.025 or 0.0554 (from opt)

# activation_options      = sigmoid sin gauss tanh abs inv
# activation_options = abs clamped cube exp gauss hat identity inv log relu sigmoid sin softplus square tanh
activation_options = sigmoid sin abs square exp clamped gauss

# node aggregation options
aggregation_default     = sum
aggregation_mutate_rate = 0.0
aggregation_options     = sum

# genome compatibility options
compatibility_disjoint_coefficient = 2.0
compatibility_weight_coefficient   = 1.0

# connection add/remove rates
conn_add_prob           = 0.0713
# was 0.1

conn_delete_prob        = 0.03
# per Cheney softbotevolution.dat

# node add/remove rates
node_add_prob           = 0.05
# was 0.1

node_delete_prob        = 0.0

# connection enable options
enabled_default         = True
enabled_mutate_rate     = 0.01
# was 0.01 or 0.044 (from opt)

feed_forward            = True

# network parameters
num_inputs              = 4
num_hidden              = 0
num_outputs             = 4
#initial_connection      = full_nodirect
initial_connection      = full

# node response options
response_init_mean      = 1.0
response_init_stdev     = 0.0
response_max_value      = 30.0
response_min_value      = -30.0
response_mutate_power   = 0.0
response_mutate_rate    = 0.0
response_replace_rate   = 0.0

# connection weight options
weight_init_mean        = 0.0
weight_init_stdev       = 1.0
weight_max_value        = 3.0
weight_min_value        = -3.0
weight_mutate_power     = 0.0025
# was 0.05

weight_mutate_rate      = 0.5
# was 0.76

weight_replace_rate     = 0.0

# node bias options
bias_init_mean          = 0.0
bias_init_stdev         = 1.0
bias_max_value          = 3.0
bias_min_value          = -3.0
bias_mutate_power       = 0.0025
# was 0.05

bias_mutate_rate        = 0.5
# was 0.76

bias_replace_rate       = 0.0

[DefaultSpeciesSet]
compatibility_threshold = 3.5
# was 3.5

[DefaultStagnation]
species_fitness_func = max
max_stagnation       = 15
species_elitism      = 1

[MIPReproduction]
elitism               = 1
# When using tournament selection now survival_threshold can stay at 1.0 though in principle
# the two selection mechanisms can be used together
survival_threshold    = 1.0
# tournament_size = 1 effectively disables tournament selection
tournament_size       = 2

min_species_size = 2

# Probability of performing mutation only, the complement of this is the probability of performing crossover and then mutation (as per Cheney's softbotEvolution repo)
mutateonlyprobability = 0.0


